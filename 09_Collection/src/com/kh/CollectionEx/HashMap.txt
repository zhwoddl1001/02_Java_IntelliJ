Map : 특정 키워드(key)를 입력하면 해당되는
      상세한 값(value)를 얻을 수 있는 컬렉션 객체
K : V 형식으로 구성
K : V 한쌍을 Entry 라고 부름

* Entry 란 ?
 -> 영어로는 기록,항목,등록,입잘하다라는 뜻
 -> 데이터 구조에서는 데이터가 저장된 하나의 항목 기록한 단위들
 -> intrare 에서 유래가 됨
 -> 무언가가 안에 들어간 것 또는 등록된 목록



K= key : 키워드 역할 (== 변수명과 같음)
1)키의 명칭은 중복이 안됨
    ->만약에 중복해서 키에다가 다른 value값을 작성할 경우
        -> 덮어쓰기가 됨
2) 순서 유지를 하지 않음 (단, LinkedHashMap 제외)

key만 묶어서 보면 Set과 같이 중복을 허용하지 않는다는 특징을 가지고 있음
    -> Map.keySet()   / Map.EntrySet()제공

value : 키워드에 해당하는 상세한 값
       -key로 인해서 모든 value가 구분 됨
       - Map.get(key) / Map.remove(Key) 형태로 사용

Map 인터페이스를 구현한 가장 많이 사용되는 데이터 구조
키-값(key-value) 가 한 쌍으로 데이터를 저장함

주요 메서드(기능)
put(K key, V value) : 키-값 쌍을 추가하거나 수정
get(O key)          : 키에 해달하는 value 값을 반환
remove(O key)       : 키-값 쌍 제거
containsKey(O key)  : 특정 키가 존재하는지 확인
containsValue(0 value) : 특정 값이 존재하는지 확인
size()                 : 목록에 저장된 키-값 쌍이 몇개인지 개수로 반환
isEmpty()              : 비어있는지 확인


----------------------------------------------------------------------------------
                              keySet()                                 entrySet()
반환 데이터               목록에 키만 모임                              목록에 키- 값으로 모임
                          Set<key>                                  Set<Map.Entry<key,value>>
주요 사용용도             키만 필요할 때 사용                           키와 값 모두 필요할 때 사용
회전 중 값 접근          map.get(key) 호출 후 접근                     entry.getValue()로 바로 접근 가능
성능                    키만 처리하므로 상대적으로 가벼움                키와 값을 모두 다루므로 조금 더 사용이 큼


Hashmap 객체
Map 인터페이스

