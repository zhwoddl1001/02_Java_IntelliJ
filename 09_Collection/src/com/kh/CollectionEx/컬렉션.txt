   자바 컬렉션

 Java Collection
데이터를 효율적으로 관리하고 조작하기 위한 데이터 구조와 알고리즘의 집합

주요 인터페이스 : List Set Map Queue
인터페이스로 만들어진 객체 : ArrayList, HashSet, LinkedList, HashMap


인터페이스                  특징              인터페이스로 만들어진 객체

List          순서가있는 데이터, 중복 허용     ArrayList, LinkedList, Vector
Set           순서가없고 중복을 허용하지 않음  HashSet, TreeSet, LinkedHashSet
Map           키-값이 짝꿍형태로 데이터를 관리  HashMap, TreeMap, LinkedHashMap
Queue         FIFO(First in, First Out)요소 처리 LinkedList, PriorityQueue
 Deque         양쪽 끝에서 삽입 및 삭제가 가능한 Queue ArrayDeque, LinkedList



Collection (상위 인터페이스)
 ├── List: 순서 있는 컬렉션  /***()안에는 자주 사용하는 경로***/
 │     ├── ArrayList(모든 정보조회 모든상품 가져오기) =데이터에 접근하는게 매우 빠름 중간에 있는 데이터를 삭제하거나 삽입은 느릴 수 있음
                                     저장 공간이 부족하면 자동으로 크기를 증가! (순서가 중요한 데이터를 저장)
 │     ├── LinkedList(데이터를 저장할 때 사용)      = 데이터를 저장하거나 삭제할 때 빠름 데이터 접근이 느림
 │     └── Vector (Thread-Safe)     = List 중에서 제일 먼저 나온 객체 ArrayList 느림, 증가할 때 증가폭이 2배로 큼
 ├── Set: 중복 없는 컬렉션
 │     ├── HashSet                     = 순서를 보장하지 않고, 중복제거 및 빠른 검색 속도 제공
 │     ├── TreeSet (정렬 지원)           = 정렬된 상태로 저장 삽입 및 삭제 속도가 HashSet 느림 메모리사용량이 많음
 │     └── LinkedHashSet (삽입 순서 유지) = 삽인된 순서를 유지 중복을 허용하지 않되 순서를 유지해야할 경우 사용
 │                                         추가적인 순서 유지 비용으로 메모리 사용량이 증가
 │                                         순서가 중요하지 않은 경우(HashSet)
 │                                         정렬된 상태가 필요할 때(TreeSet)
 │                                         삽입 순서를 유지해야 할 때(LinkedHashSet)
 └── Queue: 순서에 따라 처리되는 컬렉션
       ├── PriorityQueue (우선순위 큐)
       └── Deque (양방향 큐)
Map (키-값 쌍을 다루는 인터페이스)
 ├── HashMap (빠른 접근 속도)         = 저장하는 순서를 유지하지 않고, 빠른 데이터 접근 속도를 제공 메모리를 비교적 많이 사용
 ├── TreeMap (정렬된 키 관리)         = 데이터를 키의 정렬된 순서로 저장 / 키가 정렬된 상태로 유지돼서 범위 검색 및 정렬 작업에 유리 / 삽입과 삭제 검색이 느림
 └── LinkedHashMap (삽입 순서 유지)   = 삽입된 순서를 유지하고 데이터가 예측 가능한 순서로 반환 순서 유지를 위해 메모리 사용량이 증가
 │
 │────────────────────────────────── 빠른 검색 속도가 필요한 경우 (HashMap)     웹사이트에서 제품의 Id와 정보와 같은 정장 유용
 │────────────────────────────────── 키가 정렬된 상태가 필요한 경우 (TreeMap)    숫자 점수와 관련 데이터를 순서대로 처리할 경우 유용
 │────────────────────────────────── 삽입 순서를 유지해야하는 경우 (LinkedHashMap) 기록하는 로그 파일에서 시간순으로 발생한 행위 추적할 때 유용
 │