
컴퓨터가 예기치 못한 상황이 발생했고,
결과를 개발자한테 전달하고 예기치 못한 상황에 대해
해결해달라는 메세지를 전달

단축키 : ctrl + Art + T 는 if나 while try/catch와 같이
          감싼 후 작성해야하는 코드를 나중에 인지했을 때
          감싸고자하는 코드에 자동으로 원하는 속성으로 감싸기를 진행


Exception in thread "main"
java.lang.ArrayIndexOutOfBoundsException:
Index 5 out of bounds for length 5


예외 발생 구문을 try-catch로 처리(예외 처리)

-try{} : 에외가 발생할 수 있을 것 같은 코드들을 시도하는 구문
         (1) try ~ catch
         (2) try ~ catch ~ catch ~ catch
         (3) try ~ catch ~ catch ~ catch ~ ... ~ finally
         (4) try ~ catch ~ finally
         (5) try ~ finally

- catch(에외){} :
           try 안에 작성한 코드들을 실행하던 도중
           문제가 발생했고, 발생한 문제가 예상했던 문제와 같으면
           내가 생각한 문제가 맞아! catch(잡아서)
           catch {} 중괄호 안에 작성된 구문 수행
           -> 발생된 예외를 다른 방식으로 처리했기 때문에
               프로그램이 멈추지 않고 정상적으로 수행
             catch는 1개가 아니라 100 1000개 이상 작성 가능

-finally{} :
             catch 관계없이 마지막에 무조건적으로 실행하는 코드를 작성
             finally는 필수로 작성하는 것이 아니라 필요하다면 선택적으로 작성
             만약 finally 작성할 경우
                 (1) try ~ catch ~ finally
                 (2) try ~ finally
             주로 사용하는 경우
                    외부 프로그램 / 장치 연결을 강제적으로 끊어야할 때 주로 사용

문제가 발생하는데 어떤 문제인지 예상이 되지 않을 경우
catch(Exception e){} 로 작성하면 모든 문제는 잡힘


e = exception or error
 printStackTrace();
호출한 기능 순서대로 타고 들어가서 발생한 예외(문제)들을 모두 추적해서
 개발자가 눈으로 확인할 수 있도록 출력
throw new RuntimeException(e);

throw 발생한 예외를 현재 위치에서 보여줌
